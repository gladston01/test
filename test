import psycopg2
import pandas as pd
import json
from datetime import datetime
import argparse
import os
import numpy as np


HISTORIC_SLA_FILE = "historic_sla.json"


def parse_time(input_time):
    """
    Parses the input time and ensures it is in the correct format.
    """
    try:
        parsed_time = datetime.strptime(input_time, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        try:
            parsed_time = datetime.fromisoformat(input_time)
        except ValueError:
            print(f"Invalid time format: {input_time}")
            raise ValueError("Please provide a valid time in 'YYYY-MM-DD HH:MM:SS' format.")
    return parsed_time.strftime("%Y-%m-%d %H:%M:%S")


def query_pgsql(start_time, end_time, db_config):
    """
    Queries the PostgreSQL database for services and their duration metrics.
    """
    sql_query = """
    SELECT 
        service,
        domain,
        "timestamp",
        messagedurations,
        requestdurations,
        responsedurations,
        serverdurations
    FROM dpmessagedurations
    WHERE 
        "timestamp" BETWEEN %s AND %s
    """

    try:
        conn = psycopg2.connect(
            host=db_config['host'],
            dbname=db_config['dbname'],
            user=db_config['user'],
            password=db_config['password'],
            port=db_config['port']
        )

        with conn.cursor() as cursor:
            cursor.execute(sql_query, (start_time, end_time))
            columns = [desc[0] for desc in cursor.description]
            results = cursor.fetchall()

        df = pd.DataFrame(results, columns=columns)
    except Exception as e:
        print(f"Error querying the database: {e}")
        return None
    finally:
        if conn:
            conn.close()

    return df


def load_historic_sla():
    """
    Loads historic SLA values from a JSON file.
    """
    if os.path.exists(HISTORIC_SLA_FILE):
        with open(HISTORIC_SLA_FILE, "r") as file:
            return json.load(file)
    return {}


def save_historic_sla(historic_sla):
    """
    Saves historic SLA values to a JSON file.
    """
    def convert_numpy(obj):
        """
        Convert numpy data types to native Python types for JSON serialization.
        """
        if isinstance(obj, (np.int64, np.int32)):
            return int(obj)
        elif isinstance(obj, (np.float64, np.float32)):
            return float(obj)
        return obj

    with open(HISTORIC_SLA_FILE, "w") as file:
        json.dump(historic_sla, file, indent=4, default=convert_numpy)


def update_historic_sla(historic_sla, df):
    """
    Updates historic SLA values based on new data.
    """
    for service in df["service"].unique():
        service_df = df[df["service"] == service]

        for duration_type in ["messagedurations", "requestdurations", "responsedurations", "serverdurations"]:
            max_value = service_df[duration_type].max()
            if service not in historic_sla:
                historic_sla[service] = {}
            if duration_type not in historic_sla[service]:
                historic_sla[service][duration_type] = max_value
            else:
                historic_sla[service][duration_type] = (
                    historic_sla[service][duration_type] * 0.9 + max_value * 0.1
                )

    return historic_sla


def detect_spikes_and_log(df, historic_sla, output_file, hard_sla=1000):
    """
    Detects spikes where duration values exceed hard or historic SLAs and logs them to a TXT file.
    """
    melted_df = df.melt(
        id_vars=["service", "domain", "timestamp"],
        value_vars=["messagedurations", "requestdurations", "responsedurations", "serverdurations"],
        var_name="duration_type",
        value_name="value"
    )

    spike_report = []
    for service in melted_df["service"].unique():
        service_df = melted_df[melted_df["service"] == service]
        for duration_type in ["messagedurations", "requestdurations", "responsedurations", "serverdurations"]:
            duration_df = service_df[service_df["duration_type"] == duration_type]

            if service in historic_sla and duration_type in historic_sla[service]:
                historic_sla_value = historic_sla[service][duration_type]
            else:
                historic_sla_value = hard_sla

            for _, row in duration_df.iterrows():
                if row["value"] > hard_sla or row["value"] > historic_sla_value:
                    spike_report.append(
                        f"Service: {row['service']}, Domain: {row['domain']}, Metric: {duration_type}, "
                        f"Timestamp: {row['timestamp']}, Value: {row['value']}, "
                        f"Historic SLA: {historic_sla_value}, Hard SLA: {hard_sla}"
                    )

    with open(output_file, "w") as f:
        if spike_report:
            f.write("Alerts Detected:\n")
            f.write("\n".join(spike_report))
            print(f"Spikes logged to {output_file}")
        else:
            f.write("No SLA breaches detected.\n")
            print("No SLA breaches detected.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query PostgreSQL and detect SLA breaches in duration metrics.")
    parser.add_argument("--start-time", type=str, required=True, help="Start time in 'YYYY-MM-DD HH:MM:SS' format.")
    parser.add_argument("--end-time", type=str, required=True, help="End time in 'YYYY-MM-DD HH:MM:SS' format.")
    args = parser.parse_args()

    try:
        start_time = parse_time(args.start_time)
        end_time = parse_time(args.end_time)
    except ValueError as e:
        print(e)
        exit(1)

    db_config = {
        'host': 'localhost',
        'dbname': 'your_db_name',
        'user': 'your_user',
        'password': 'your_password',
        'port': 5432
    }

    result_df = query_pgsql(start_time, end_time, db_config)

    if result_df is not None and not result_df.empty:
        historic_sla = load_historic_sla()
        historic_sla = update_historic_sla(historic_sla, result_df)
        save_historic_sla(historic_sla)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"alerts_{timestamp}.txt"
        detect_spikes_and_log(result_df, historic_sla, output_file)
    else:
        print("No data found for the given time range.")
