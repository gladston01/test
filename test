stage('Calculate Test Metrics and Notify Slack') {
    agent { node { label '1444444001' }}
    steps {
        script {
            // Read additional files for calculations
            def disabledListCount = powershell(returnStdout: true, script: "(Get-Content D:\\jenkins_agent\\workspace\\DisabledTestCaseList.txt | Measure-Object -Line).Lines").trim()
            def failedCasesContent = readFile('D:/test/12.txt')
            def tokenCalls = readFile('D:/jenkins_agent/workspace/TokenCallCount.txt').toInteger()

            // Extract test metrics from Jenkins build results
            AbstractTestResultAction testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)

            if (testResultAction != null) {
                def totalTests = testResultAction.totalCount
                def failedTests = testResultAction.failCount
                def passedTests = totalTests - failedTests
                def passPercent = (passedTests / totalTests) * 100
                def duration = currentBuild.durationString.split("and")[0]
                def buildNumber = env.BUILD_NUMBER
                def projectName = env.JOB_NAME.replaceAll(/.*NFT\//, '').toUpperCase()
                def status = currentBuild.currentResult

                // Construct the Slack message
                def slackMessage = """*${projectName} - ${status}*
                    *Release:* ${params.branchName}
                    *Environment:* ${params.Environment}
                    *Triggered by:* ${user}
                    *Build:* <https://<URL>/${buildNumber}/|#${buildNumber}>
                    *Build Time:* ${duration}
                    *Route:* ${params.tokenType}
                    *Test Cases Executed:* ${totalTests}
                    *Failed:* ${failedTests}
                    *Disabled:* ${disabledListCount}
                    *Pass Percentage:* ${passPercent}%
                    *Test Report:* <https://<URL>/${buildNumber}/testReport/|View Report>"""

                echo "Sending Slack notification..."

                // Determine Slack message color
                def color = status == 'SUCCESS' ? 'good' : 'danger'

                // Send Slack notifications
                slackSend(channel: '#test-notification', color: color, message: slackMessage)
                slackSend(channel: '#test-notification', message: failedCasesContent)
            } else {
                echo "No test results found to calculate metrics."
            }
        }
    }
}
