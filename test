import os
import re
import argparse
import chardet

# Function to extract the failure reason from the response content
def extract_failure_reason(response_content):
    # Define the patterns for failure reasons
    error_patterns = [
        re.compile(r"<.*:errorText>(.*?)</.*:errorText>", re.DOTALL),
        re.compile(r"<messageText>(.*?)</messageText>", re.DOTALL),
        re.compile(r"<message>(.*?)</message>", re.DOTALL),
        re.compile(r"<SerErrorMessage>(.*?)</SerErrorMessage>", re.DOTALL),
    ]

    for pattern in error_patterns:
        match = pattern.search(response_content)
        if match:
            return match.group(1).strip()

    return "No failure reason found."

# Set up argument parser
parser = argparse.ArgumentParser(description="Extract failure details from text files.")
parser.add_argument("--output-location", required=True, help="Path to the directory containing failure files.")
args = parser.parse_args()

output_location = args.output_location

# Verify the directory exists
if not os.path.isdir(output_location):
    print(f"Error: The directory '{output_location}' does not exist.")
    exit(1)

# Prepare to write to the consolidated output file
consolidated_output_file = "consolidated_failures.txt"

with open(consolidated_output_file, "w", encoding="utf-8") as output:
    # Find all files with "-FAIL.txt" in their names at the given location only
    for file in os.listdir(output_location):
        if file.endswith("-FAIL.txt"):
            # Log the file being processed
            print(f"Processing file: {file}")

            # Extract TestSuiteName, TestCaseName, and testStepname from the file name
            match = re.match(r"(.*)-(.*)-(.*)-\d+-FAIL\.txt", file)
            if not match:
                print(f"Warning: Skipping file '{file}' due to unexpected name format.")
                continue

            test_suite_name, test_case_name, test_step_name = match.groups()

            # Read the file content with encoding detection
            file_path = os.path.join(output_location, file)
            with open(file_path, "rb") as f:
                raw_data = f.read()
                detected_encoding = chardet.detect(raw_data)["encoding"]

            with open(file_path, "r", encoding=detected_encoding, errors="replace") as f:
                file_content = f.read()

            # Extract the response section using a flexible regex for separator lines
            response_match = re.search(r"-+\s*Response\s*-+\s*(.*)", file_content, re.DOTALL)
            if not response_match:
                output.write(f"Test Suite: {test_suite_name}\n")
                output.write(f"Test Case: {test_case_name}\n")
                output.write(f"Test Step: {test_step_name}\n")
                output.write("Failure Reason: No response section found.\n")
                output.write("-" * 40 + "\n")
                continue

            response_content = response_match.group(1)

            # Extract the failure reason from the response
            failure_reason = extract_failure_reason(response_content)

            # Write the extracted details to the consolidated output file
            output.write(f"Test Suite: {test_suite_name}\n")
            output.write(f"Test Case: {test_case_name}\n")
            output.write(f"Test Step: {test_step_name}\n")
            output.write(f"Failure Reason: {failure_reason}\n")
            output.write("-" * 40 + "\n")

print(f"Extraction completed. Check the file '{consolidated_output_file}' for details.")
