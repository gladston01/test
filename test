pipeline {
    agent any

    environment {
        ALERT_FILE_LOCATION = 'D:\\path\\to\\alert\\files' // Directory where alert files are stored
        SLACK_CHANNEL = '#alerts' // Slack channel to send the notification
    }

    stages {
        stage('Find Latest Alert File') {
            steps {
                script {
                    // Find the most recent file with "alert" in its name
                    def alertFile = bat(
                        script: """
                            @echo off
                            pushd "${env.ALERT_FILE_LOCATION}"
                            for /f "delims=" %%i in ('dir /b /o:-d *alert*.txt') do (
                                echo %%i
                                exit /b
                            )
                            popd
                        """,
                        returnStdout: true
                    ).trim()

                    if (!alertFile) {
                        error "No alert files found in ${env.ALERT_FILE_LOCATION}"
                    }

                    env.ALERT_FILE_PATH = "${env.ALERT_FILE_LOCATION}\\${alertFile}"
                    echo "Found latest alert file: ${env.ALERT_FILE_PATH}"
                }
            }
        }

        stage('Read and Send Slack Notification') {
            steps {
                script {
                    // Read the alert file content
                    def alertContent = readFile(env.ALERT_FILE_PATH)
                    
                    // Extract details for Slack notification
                    def startTime = alertContent.find(/(?<=Test Start Time: ).*/)
                    def endTime = alertContent.find(/(?<=Test End Time: ).*/)
                    def alertsDetected = alertContent.find(/(?<=Alerts Detected:\\r?\\n).*/s)?.trim()

                    if (!startTime || !endTime || !alertsDetected) {
                        error "Failed to extract alert details from the file: ${env.ALERT_FILE_PATH}"
                    }

                    // Prepare Slack message
                    def slackMessage = """
                        *Test Alert Notification* :rotating_light:
                        *Test Start Time:* ${startTime}
                        *Test End Time:* ${endTime}
                        *Alerts Detected:*
                        ${alertsDetected}
                    """

                    // Send notification to Slack
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'danger',
                        message: slackMessage
                    )

                    echo "Slack notification sent successfully."
                }
            }
        }
    }
}
