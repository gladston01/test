import requests
import csv
import time

# VTS server details
VTS_URL = "http://your_vts_server:port/endpoint"  # Replace with your VTS server URL
REQUEST_PAYLOAD = {
    "your_request_payload_key": "value"  # Replace with your actual JSON request payload
}
HEADERS = {"Content-Type": "application/json"}  # Adjust headers as necessary

# Output CSV file
CSV_FILE = "output.csv"

def is_row_empty(row):
    """Check if all values in a row are empty (null or "")."""
    return all(value is None or str(value).strip() == "" for value in row.values())

def fetch_data():
    """Send a JSON request to the VTS server and return the response data."""
    try:
        response = requests.post(VTS_URL, json=REQUEST_PAYLOAD, headers=HEADERS)
        response.raise_for_status()  # Raise an error for HTTP errors
        return response.json().get("data", [])
    except Exception as e:
        print(f"Error querying VTS: {e}")
        return []

def write_to_csv(data, file_path):
    """Write data to a CSV file."""
    try:
        # Check if file exists and determine if we need a header
        write_header = not os.path.exists(file_path)

        with open(file_path, mode="a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)

            # Write header if the file is new
            if write_header and data:
                writer.writerow(data[0].keys())

            # Write data rows
            for row in data:
                if not is_row_empty(row):  # Skip rows where all values are empty
                    writer.writerow(row.values())

    except Exception as e:
        print(f"Error writing to CSV: {e}")

def main():
    """Main function to query VTS and write data to CSV until no valid data is available."""
    while True:
        print("Querying VTS...")
        data = fetch_data()

        if not data or all(is_row_empty(row) for row in data):
            print("No valid data remaining. Stopping.")
            break

        print(f"Fetched {len(data)} rows. Writing to CSV...")
        write_to_csv(data, CSV_FILE)
        time.sleep(1)  # Add a delay if needed to avoid overloading the server

if __name__ == "__main__":
    main()
