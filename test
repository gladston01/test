pipeline {
    agent any

    environment {
        FILE_LOCATION = 'D:\\path\\to\\your\\jtl\\files' // Directory where .jtl files are generated
        DESTINATION_LOCATION = 'D:\\path\\to\\git\\repo' // Directory where the repository is cloned
        RENAMED_FILE = 'analysis.jtl' // New name for the copied file
    }

    stages {
        stage('Find Latest JTL File') {
            steps {
                script {
                    // Find the most recently created .jtl file
                    def jtlFile = bat(
                        script: """
                            @echo off
                            pushd "${env.FILE_LOCATION}"
                            for /f "delims=" %%i in ('dir /b /o:-d *.jtl') do (
                                echo %%i
                                exit /b
                            )
                            popd
                        """,
                        returnStdout: true
                    ).trim()

                    if (!jtlFile) {
                        error "No .jtl files found in ${env.FILE_LOCATION}"
                    }

                    env.LATEST_JTL_FILE = "${env.FILE_LOCATION}\\${jtlFile}"
                    echo "Found latest JTL file: ${env.LATEST_JTL_FILE}"
                }
            }
        }

        stage('Copy and Rename File') {
            steps {
                script {
                    // Remove existing analysis.jtl if it exists and copy the new file
                    bat """
                        if exist "${env.DESTINATION_LOCATION}\\${env.RENAMED_FILE}" del "${env.DESTINATION_LOCATION}\\${env.RENAMED_FILE}"
                        copy "${env.LATEST_JTL_FILE}" "${env.DESTINATION_LOCATION}\\${env.RENAMED_FILE}"
                    """
                    echo "Copied and renamed ${env.LATEST_JTL_FILE} to ${env.DESTINATION_LOCATION}\\${env.RENAMED_FILE}"
                }
            }
        }

        stage('Commit and Push to GitLab') {
            steps {
                script {
                    // Navigate to the repository directory and push changes
                    bat """
                        cd /d ${env.DESTINATION_LOCATION}

                        REM Configure Git user details
                        git config user.name "Jenkins"
                        git config user.email "jenkins@example.com"

                        REM Add the renamed file to the staging area
                        git add ${env.RENAMED_FILE}

                        REM Commit the file with a message
                        git commit -m "Automated upload of ${env.RENAMED_FILE}" || echo No changes to commit

                        REM Push the changes
                        git push
                    """
                }
            }
        }
    }
}
